{"version":3,"sources":["components/NavigationBar.js","components/TeamInterface.js","TeamManagement.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","flexGrow","NavigationBar","classes","react_default","a","createElement","AppBar","className","position","Toolbar","Link","to","variant","color","theme","formControl","maxWidth","minWidth","marginBottom","spacing","selectEmpty","marginTop","card","width","margin","SaveButton","padding","typography","TeamInterface","props","_React$useState","React","useState","Team","Employees","_React$useState2","Object","slicedToArray","TeamMembers","setTeamMembers","_React$useState3","TeamLead","_React$useState4","setTeamLead","assignedProjects","Projects","map","assignedID","find","prj","_id","_React$useState5","_React$useState6","setProjects","_React$useState7","_React$useState8","anchorEl","setAnchorEl","_React$useState9","_React$useState10","SavePopoverResponse","setSavePopoverState","open","Boolean","id","EmployeeFullName","Array","isArray","emp","employee","FirstName","LastName","join","foundEmployee","concat","ProjectName","assignedPrj","assignedProject","Card","CardHeader","title","TeamName","action","Fragment","Button","aria-describedby","onClick","event","currentTarget","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","axios","put","Url","then","response","data","message","stop","apply","this","arguments","putData","button","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","Typography","CardContent","FormControl","InputLabel","htmlFor","Select","single","autoWidth","value","onChange","target","input","Input","renderValue","selected","MenuItem","key","ListItemText","primary","multiple","url","HeadTheme","createMuiTheme","palette","main","contrastText","textPrimary","TeamManagement","_useState","_useState2","Teams","loadTeams","_useState3","_useState4","loadEmployees","_useState5","_useState6","loadProjects","_useState7","_useState8","LoadStatus","setLoadStatus","useEffect","t","e","p","get","sent","fetchData","MuiThemeProvider_default","Container","components_NavigationBar","Box","display","alignContent","flexDirection","flexWrap","team","components_TeamInterface","window","location","hostname","match","ReactDOM","render","src_TeamManagement","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mOAMMA,EAAYC,YAAW,CACzBC,KAAM,CACFC,SAAU,KAaHC,MAVf,WACI,IAAMC,EAAUL,IAChB,OACQM,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,UAAWL,EAAQH,KAAMS,SAAS,UACtCL,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACIN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,IAAIC,QAAQ,KAAKC,MAAM,eAAhC,2JCAdhB,EAAYC,YAAW,SAAAgB,GAAK,MAAK,CACnCC,YAAa,CACTC,SAAU,OACVC,SAAU,IACVC,aAAcJ,EAAMK,QAAQ,IAEhCC,YAAa,CACTC,UAAWP,EAAMK,QAAQ,IAE7BG,KAAM,CACFC,MAAO,OACPN,SAAU,QACVO,OAAQV,EAAMK,QAAQ,IAE1BM,WAAY,CACRC,QAASZ,EAAMK,QAAQ,IAG3BQ,WAAY,CACRD,QAASZ,EAAMK,QAAQ,OA+JhBS,MA5Jf,SAAuBC,GACnB,IAAM3B,EAAUL,IADUiC,EAEYC,IAAMC,SAASH,EAAMI,KAAKC,WAFtCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAN,EAAA,GAEnBQ,EAFmBH,EAAA,GAENI,EAFMJ,EAAA,GAAAK,EAGMT,IAAMC,SAASH,EAAMI,KAAKQ,UAHhCC,EAAAN,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGnBC,EAHmBC,EAAA,GAGTC,EAHSD,EAAA,GAItBE,EAAmBf,EAAMI,KAAKY,SAASC,IAAI,SAAAC,GAAU,OAAIlB,EAAMgB,SAASG,KAAK,SAAAC,GAAG,OAAIA,EAAIC,MAAQH,MAJ1EI,EAKMpB,IAAMC,SAASY,GALrBQ,EAAAhB,OAAAC,EAAA,EAAAD,CAAAe,EAAA,GAKnBN,EALmBO,EAAA,GAKTC,EALSD,EAAA,GAAAE,EAMMvB,IAAMC,SAAS,MANrBuB,EAAAnB,OAAAC,EAAA,EAAAD,CAAAkB,EAAA,GAMnBE,EANmBD,EAAA,GAMTE,EANSF,EAAA,GAAAG,EAOyB3B,IAAMC,SAAS,cAPxC2B,EAAAvB,OAAAC,EAAA,EAAAD,CAAAsB,EAAA,GAOnBE,EAPmBD,EAAA,GAOEE,EAPFF,EAAA,GAoBpBG,EAAOC,QAAQP,GACfQ,EAAKF,EAAO,eAAiB,KAmBnC,SAASG,EAAiBD,GACtB,GAAIE,MAAMC,QAAQH,GAAK,OAAOA,EAAGlB,IAAI,SAAAI,GAAG,OAAIrB,EAAMK,UAAUc,KAAK,SAAAoB,GAAG,OAAIA,EAAIlB,MAAQA,MAAMJ,IAAI,SAAAuB,GAAQ,OAAIA,EAASC,UAAY,IAAOD,EAASE,WAAUC,KAAK,MAC9J,IAAIC,EAAgB5C,EAAMK,UAAUc,KAAK,SAAAoB,GAAG,OAAIA,EAAIlB,MAAQc,IAC5D,OAAIS,EAAsBA,EAAcH,UAAY,IAAMG,EAAcF,SACxE,qBAAAG,OAA4BV,EAA5B,mBAKJ,SAASW,EAAYX,GACjB,GAAIE,MAAMC,QAAQH,GAAK,CACnB,IAAIpB,EAAmBoB,EAAGlB,IAAK,SAAA8B,GAAW,OAAI/C,EAAMgB,SAASG,KAAK,SAAAC,GAAG,OAAIA,EAAIC,MAAQ0B,EAAY1B,QACjG,OAAIN,EAAyBA,EAAiBE,IAAI,SAAA8B,GAAW,OAAIA,EAAYD,cAAaH,KAAK,MAC1F,aAAAE,OAAoBV,EAApB,mBAEL,IAAIa,EAAkBhD,EAAMgB,SAASG,KAAK,SAAAC,GAAG,OAAIA,EAAIC,MAAQc,IAC7D,OAAIa,EAAwBA,EAAgBF,YACvC,oBAAAD,OAA2BV,EAA3B,mBAGb,OACI7D,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CAAMvE,UAAWL,EAAQoB,MACrBnB,EAAAC,EAAAC,cAAC0E,EAAA,EAAD,CAAYC,MAAOnD,EAAMI,KAAKgD,SAClBC,OACI/E,EAAAC,EAAAC,cAACF,EAAAC,EAAM+E,SAAP,KACAhF,EAAAC,EAAAC,cAAC+E,EAAA,EAAD,CACIC,mBAAkBrB,EAClBsB,QA7C5B,SAAoBC,GAChB9B,EAAY8B,EAAMC,eACL,eAAAC,EAAArD,OAAAsD,EAAA,EAAAtD,CAAAuD,EAAAvF,EAAAwF,KAAG,SAAAC,IAAA,OAAAF,EAAAvF,EAAA0F,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAENC,IAAMC,IAAItE,EAAMuE,IAAM,QAAUvE,EAAMI,KAAKiB,IAC7C,CACIL,WACAX,UAAWI,EACXG,aAEH4D,KAAK,SAAAC,GAAQ,OAAIzC,EAAoByC,EAASC,KAAKC,WAR5C,wBAAAT,EAAAU,SAAAZ,MAAH,yBAAAJ,EAAAiB,MAAAC,KAAAC,YAAA,EAUbC,IAkCwBjG,QAAQ,YACRC,MAAM,UACNN,UAAWL,EAAQ4G,QALvB,QASA3G,EAAAC,EAAAC,cAAC0G,EAAA,EAAD,CACA/C,GAAIA,EACJF,KAAMA,EACNN,SAAUA,EACVwD,QA7DxB,SAA4BzB,GACxB9B,EAAY,OA6DQwD,aAAc,CACVC,SAAU,SACVC,WAAY,SAEhBC,gBAAiB,CACbF,SAAU,SACVC,WAAY,WAGhBhH,EAAAC,EAAAC,cAACgH,EAAA,EAAD,CAAY9G,UAAWL,EAAQyB,YAAaiC,OAK5DzD,EAAAC,EAAAC,cAACiH,EAAA,EAAD,KACInH,EAAAC,EAAAC,cAACkH,EAAA,EAAD,CAAa3G,QAAQ,WAAWL,UAAWL,EAAQa,aAC/CZ,EAAAC,EAAAC,cAACmH,EAAA,EAAD,CAAYC,QAAQ,oBAApB,aACAtH,EAAAC,EAAAC,cAACqH,EAAA,EAAD,CACI9G,QAAQ,WACRoD,GAAG,mBACH2D,OAAO,OACPC,WAAW,EACXC,MAAOpF,EACPqF,SA9FpB,SAA8BvC,GAC1B5C,EAAY4C,EAAMwC,OAAOF,QA8FTG,MAAO7H,EAAAC,EAAAC,cAAC4H,EAAA,EAAD,MACPC,YAAa,SAAAC,GAAQ,OAAIlE,EAAiBkE,KAGtCtG,EAAMK,UAAUY,IAAI,SAAAsB,GAAG,OACnBjE,EAAAC,EAAAC,cAAC+H,EAAA,EAAD,CAAUC,IAAKjE,EAAIlB,IAAK2E,MAAOzD,EAAIlB,KAC/B/C,EAAAC,EAAAC,cAACiI,EAAA,EAAD,CAAcC,QAAStE,EAAiBG,EAAIlB,YAKhE/C,EAAAC,EAAAC,cAACkH,EAAA,EAAD,CAAa3G,QAAQ,WAAWL,UAAWL,EAAQa,aAC/CZ,EAAAC,EAAAC,cAACmH,EAAA,EAAD,CAAYC,QAAQ,uBAApB,gBACAtH,EAAAC,EAAAC,cAACqH,EAAA,EAAD,CACI9G,QAAQ,WACRoD,GAAG,sBACHwE,UAAQ,EACRZ,WAAW,EACXC,MAAOvF,EACPwF,SA/GpB,SAAgCvC,GAC5BhD,EAAegD,EAAMwC,OAAOF,QA+GZG,MAAO7H,EAAAC,EAAAC,cAAC4H,EAAA,EAAD,MACPC,YAAa,SAAAC,GAAQ,OAAIlE,EAAiBkE,KAEzCtG,EAAMK,UAAUY,IAAI,SAAAsB,GAAG,OACpBjE,EAAAC,EAAAC,cAAC+H,EAAA,EAAD,CAAUC,IAAKjE,EAAIlB,IAAK2E,MAAOzD,EAAIlB,KAC/B/C,EAAAC,EAAAC,cAACiI,EAAA,EAAD,CAAcC,QAAStE,EAAiBG,EAAIlB,YAK5D/C,EAAAC,EAAAC,cAACkH,EAAA,EAAD,CAAa3G,QAAQ,WAAWL,UAAWL,EAAQa,aAC/CZ,EAAAC,EAAAC,cAACmH,EAAA,EAAD,CAAYC,QAAQ,mBAApB,YACAtH,EAAAC,EAAAC,cAACqH,EAAA,EAAD,CACI9G,QAAQ,WACRoD,GAAG,kBACHwE,UAAQ,EACRZ,WAAW,EACXC,MAAOhF,EACPiF,SA/HpB,SAA6BvC,GACzBlC,EAAYkC,EAAMwC,OAAOF,QA+HTG,MAAO7H,EAAAC,EAAAC,cAAC4H,EAAA,EAAD,MACPC,YAAa,SAAAC,GAAQ,OAAIxD,EAAYwD,KAEpCtF,EAASC,IAAI,SAAAG,GAAG,OACb9C,EAAAC,EAAAC,cAAC+H,EAAA,EAAD,CAAUC,IAAKpF,EAAIC,IAAK2E,MAAO5E,EAAIC,KAC/B/C,EAAAC,EAAAC,cAACiI,EAAA,EAAD,CAAcC,QAAS5D,EAAY1B,EAAIC,0DChLjEuF,EAAM,+CACNC,EAAYC,YAAe,CAC/BC,QAAS,CACPL,QAAS,CACPM,KAAM,UACNC,aAAc,QAEhBC,YAAa,CACXF,KAAM,QACNC,aAAc,cAiDLE,MA/Cf,WAA0B,IAAAC,EACGjH,mBAAS,IADZkH,EAAA9G,OAAAC,EAAA,EAAAD,CAAA6G,EAAA,GACjBE,EADiBD,EAAA,GACVE,EADUF,EAAA,GAAAG,EAEWrH,mBAAS,IAFpBsH,EAAAlH,OAAAC,EAAA,EAAAD,CAAAiH,EAAA,GAEjBnH,EAFiBoH,EAAA,GAENC,EAFMD,EAAA,GAAAE,EAGSxH,mBAAS,IAHlByH,EAAArH,OAAAC,EAAA,EAAAD,CAAAoH,EAAA,GAGjB3G,EAHiB4G,EAAA,GAGPC,EAHOD,EAAA,GAAAE,EAIY3H,oBAAS,GAJrB4H,EAAAxH,OAAAC,EAAA,EAAAD,CAAAuH,EAAA,GAIjBE,EAJiBD,EAAA,GAILE,EAJKF,EAAA,GAkBxB,OAZAG,oBAAW,YACM,eAAAtE,EAAArD,OAAAsD,EAAA,EAAAtD,CAAAuD,EAAAvF,EAAAwF,KAAG,SAAAC,IAAA,IAAAmE,EAAAC,EAAAC,EAAA,OAAAvE,EAAAvF,EAAA0F,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACFC,IAAMiE,IAAI1B,EAAM,aADd,cACZuB,EADYjE,EAAAqE,KAEhBhB,EAAUY,EAAEzD,MAFIR,EAAAE,KAAA,EAGFC,IAAMiE,IAAI1B,EAAM,aAHd,cAGZwB,EAHYlE,EAAAqE,KAIhBb,EAAcU,EAAE1D,MAJAR,EAAAE,KAAA,GAKFC,IAAMiE,IAAI1B,EAAM,YALd,QAKZyB,EALYnE,EAAAqE,KAMhBV,EAAaQ,EAAE3D,MACfuD,GAAc,GAPE,yBAAA/D,EAAAU,SAAAZ,MAAH,yBAAAJ,EAAAiB,MAAAC,KAAAC,YAAA,EASfyD,IACC,IAEClK,EAAAC,EAAAC,cAACiK,EAAAlK,EAAD,CAAkBU,MAAO4H,GACzBvI,EAAAC,EAAAC,cAACkK,EAAA,EAAD,KACEpK,EAAAC,EAAAC,cAACmK,EAAD,MACErK,EAAAC,EAAAC,cAACoK,EAAA,EAAD,CAAKC,QAAQ,OACRC,aAAa,aACbC,cAAc,MACdC,SAAS,QAEZhB,EACAV,EAAMrG,IACF,SAAAgI,GAAI,OACA3K,EAAAC,EAAAC,cAAC0K,EAAD,CACI1C,IAAKyC,EAAK5H,IACVjB,KAAM6I,EACN5I,UAAWA,EACXW,SAAUA,EACVuD,IAAKqC,MAIXtI,EAAAC,EAAAC,cAAA,0CC/CE0D,QACW,cAA7BiH,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlL,EAAAC,EAAAC,cAACiL,EAAD,MAAoBC,SAASC,eAAe,SD2HtD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtF,KAAK,SAAAuF,GACjCA,EAAaC","file":"static/js/main.e0fe4dd0.chunk.js","sourcesContent":["import React from 'react'\nimport Link from '@material-ui/core/Link'\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    root: {\n        flexGrow: 1\n    }\n});\nfunction NavigationBar() {\n    const classes = useStyles();\n    return (\n            <AppBar className={classes.root} position=\"static\">\n                <Toolbar >\n                    <Link to=\"#\" variant=\"h4\" color=\"textPrimary\">Assignment 3 - Team Detail by Wenxuan Liu</Link>\n                </Toolbar>\n            </AppBar>\n    );\n}\nexport default NavigationBar\n","import React from 'react'\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Select from '@material-ui/core/Select';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from '@material-ui/core/Button';\nimport axios from \"axios\";\nimport Popover from '@material-ui/core/Popover';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles(theme => ({\n    formControl: {\n        maxWidth: '100%',\n        minWidth: 120,\n        marginBottom: theme.spacing(2)\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n    card: {\n        width: \"15vw\",\n        minWidth: \"180px\",\n        margin: theme.spacing(1),\n    },\n    SaveButton: {\n        padding: theme.spacing(2),\n\n    },\n    typography: {\n        padding: theme.spacing(2)\n    }\n}));\nfunction TeamInterface(props) {\n    const classes = useStyles();\n    const [TeamMembers, setTeamMembers] = React.useState(props.Team.Employees);\n    const [TeamLead, setTeamLead] = React.useState(props.Team.TeamLead);\n    let assignedProjects = props.Team.Projects.map(assignedID => props.Projects.find(prj => prj._id === assignedID));\n    const [Projects, setProjects] = React.useState(assignedProjects);\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const [SavePopoverResponse, setSavePopoverState] = React.useState(\"Loading...\");\n    function handleTeamLeadChange(event) {\n        setTeamLead(event.target.value)\n    }\n    function handleTeamMemberChange(event) {\n        setTeamMembers(event.target.value)\n    }\n    function handleProjectChange(event) {\n        setProjects(event.target.value)\n    }\n    function handlePopoverClose(event) {\n        setAnchorEl(null);\n    }\n    const open = Boolean(anchorEl);\n    const id = open ? 'save-popover' : null;\n    function handleSave(event) {\n        setAnchorEl(event.currentTarget);\n        const putData = async () => {\n            //debugger;\n            await axios.put(props.Url + 'team/' + props.Team._id,\n                {\n                    Projects,\n                    Employees: TeamMembers,\n                    TeamLead\n                })\n                .then(response => setSavePopoverState(response.data.message));\n        };\n        putData();\n    }\n    //PopoverManagement ends here\n    /**\n     * @return {string}\n     */\n    function EmployeeFullName(id) {\n        if (Array.isArray(id)) return id.map(_id => props.Employees.find(emp => emp._id === _id)).map(employee => employee.FirstName + ' ' +  employee.LastName).join(', ');\n        let foundEmployee = props.Employees.find(emp => emp._id === id);\n        if (foundEmployee) return foundEmployee.FirstName + ' ' + foundEmployee.LastName;\n        return `Employee with id: ${id} doesn't exist!`;\n    }\n    /**\n     * @return {string}\n     */\n    function ProjectName(id) {\n        if (Array.isArray(id)) {\n            let assignedProjects = id.map((assignedPrj => props.Projects.find(prj => prj._id === assignedPrj._id)));\n            if (assignedProjects) return assignedProjects.map(assignedPrj => assignedPrj.ProjectName).join(', ');\n            else return `Projects: ${id} - don't exist!`;\n        } else {\n            let assignedProject = props.Projects.find(prj => prj._id === id);\n            if (assignedProject) return assignedProject.ProjectName;\n            else return `Project with id: ${id} doesn't exist!`;\n        }\n    }\n    return (\n        <Card className={classes.card}>\n            <CardHeader title={props.Team.TeamName}\n                        action={\n                            <React.Fragment>\n                            <Button\n                                aria-describedby={id}\n                                onClick={handleSave}\n                                variant=\"contained\"\n                                color=\"primary\"\n                                className={classes.button}\n                            >\n                                Save\n                            </Button>\n                            <Popover\n                            id={id}\n                            open={open}\n                            anchorEl={anchorEl}\n                            onClose={handlePopoverClose}\n                            anchorOrigin={{\n                                vertical: 'bottom',\n                                horizontal: 'right',\n                            }}\n                            transformOrigin={{\n                                vertical: 'center',\n                                horizontal: 'center',\n                            }}\n                            >\n                            <Typography className={classes.typography}>{SavePopoverResponse}</Typography>\n                            </Popover>\n                            </React.Fragment>\n                        }>\n            </CardHeader>\n            <CardContent>\n                <FormControl variant=\"outlined\" className={classes.formControl}>\n                    <InputLabel htmlFor=\"team-lead-select\">Team Lead</InputLabel>\n                    <Select\n                        variant=\"outlined\"\n                        id=\"team-lead-select\"\n                        single=\"true\"\n                        autoWidth={true}\n                        value={TeamLead}\n                        onChange={handleTeamLeadChange}\n                        input={<Input />}\n                        renderValue={selected => EmployeeFullName(selected)}\n                    >\n                        {\n                            props.Employees.map(emp =>\n                                <MenuItem key={emp._id} value={emp._id}>\n                                    <ListItemText primary={EmployeeFullName(emp._id)} />\n                                </MenuItem>)\n                        }\n                    </Select>\n                </FormControl>\n                <FormControl variant=\"outlined\" className={classes.formControl}>\n                    <InputLabel htmlFor=\"team-members-select\">Team Members</InputLabel>\n                    <Select\n                        variant=\"outlined\"\n                        id=\"team-members-select\"\n                        multiple\n                        autoWidth={true}\n                        value={TeamMembers}\n                        onChange={handleTeamMemberChange}\n                        input={<Input />}\n                        renderValue={selected => EmployeeFullName(selected)}\n                    >\n                        {props.Employees.map(emp =>\n                            <MenuItem key={emp._id} value={emp._id}>\n                                <ListItemText primary={EmployeeFullName(emp._id)} />\n                            </MenuItem>\n                        )}\n                    </Select>\n                </FormControl>\n                <FormControl variant=\"outlined\" className={classes.formControl}>\n                    <InputLabel htmlFor=\"projects-select\">Projects</InputLabel>\n                    <Select\n                        variant=\"outlined\"\n                        id=\"projects-select\"\n                        multiple\n                        autoWidth={true}\n                        value={Projects}\n                        onChange={handleProjectChange}\n                        input={<Input />}\n                        renderValue={selected => ProjectName(selected)}\n                    >\n                        {Projects.map(prj =>\n                            <MenuItem key={prj._id} value={prj._id}>\n                                <ListItemText primary={ProjectName(prj._id)} />\n                            </MenuItem>\n                        )}\n                    </Select>\n                </FormControl>\n            </CardContent>\n        </Card>\n    );\n}\nexport default TeamInterface\n","import React, {useState, useEffect} from 'react'\nimport axios from 'axios'\nimport NavigationBar from './components/NavigationBar'\nimport TeamInterface from './components/TeamInterface'\nimport Box from '@material-ui/core/Box'\nimport Container from '@material-ui/core/Container'\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider';\n\nconst url = \"https://murmuring-spire-82736.herokuapp.com/\";\nconst HeadTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#90a4ae',\n      contrastText: '#fff',\n    },\n    textPrimary: {\n      main: 'white',\n      contrastText: '#e0f7fa',\n    }}});\nfunction TeamManagement() {\n  const [Teams, loadTeams] = useState([]);\n  const [Employees, loadEmployees] = useState([]);\n  const [Projects, loadProjects] = useState([]);\n  const [LoadStatus, setLoadStatus] = useState(false);\n\n  useEffect( () => {\n    const fetchData = async () => {\n      let t = await axios.get(url + 'teams-raw');\n      loadTeams(t.data);\n      let e = await axios.get(url + 'employees');\n      loadEmployees(e.data);\n      let p = await axios.get(url + 'projects');\n      loadProjects(p.data);\n      setLoadStatus(true);\n    };\n    fetchData();\n  }, []);\n  return (\n      <MuiThemeProvider theme={HeadTheme}>\n      <Container>\n        <NavigationBar />\n          <Box display=\"flex\"\n               alignContent=\"flex-start\"\n               flexDirection=\"row\"\n               flexWrap=\"wrap\"\n          >\n          { LoadStatus ?\n            Teams.map(\n                team =>\n                    <TeamInterface\n                        key={team._id}\n                        Team={team}\n                        Employees={Employees}\n                        Projects={Projects}\n                        Url={url}\n                    />\n                ) :\n              (\n                  <p>loading is in progress...</p>\n              )\n              }\n            </Box>\n      </Container>\n    </MuiThemeProvider>\n    );\n}\nexport default TeamManagement\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. TeamManagement is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TeamManagement from './TeamManagement';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<TeamManagement />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}